#!/bin/bash

# --------------------------
# Configuración inicial
# --------------------------
clear
echo -e "\e[1;36m=== Instalador Automático de n8n ===\e[0m"

# Solicitar datos
read -p "Ingrese su subdominio completo (ej: n8n.tudominio.com): " DOMAIN
read -p "Ingrese su email para Let's Encrypt: " EMAIL

# Validación básica
if [[ ! "$DOMAIN" =~ ^[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$ ]]; then
    echo -e "\e[31mError: Formato de dominio inválido\e[0m"
    exit 1
fi

if [[ ! "$EMAIL" =~ ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$ ]]; then
    echo -e "\e[31mError: Email inválido\e[0m"
    exit 1
fi

# --------------------------
# Limpieza previa
# --------------------------
echo -e "\n\e[33mRealizando limpieza previa...\e[0m"
sudo docker rm -f n8n 2>/dev/null
sudo rm -rf /tmp/n8n-auto-install 2>/dev/null
sudo rm -f /etc/nginx/sites-{available,enabled}/n8n 2>/dev/null
sudo certbot delete --non-interactive --cert-name "$DOMAIN" 2>/dev/null

# --------------------------
# Instalar dependencias
# --------------------------
echo -e "\n\e[33mActualizando sistema...\e[0m"
sudo apt update && sudo apt upgrade -y

echo -e "\n\e[33mInstalando componentes clave...\e[0m"
sudo apt install -y \
    curl \
    git \
    docker.io \
    nginx \
    certbot \
    python3-certbot-nginx

# Instalar Docker Compose
if [ ! -f "/usr/local/bin/docker-compose" ]; then
    echo -e "\n\e[33mInstalando Docker Compose...\e[0m"
    sudo curl -L "https://github.com/docker/compose/releases/download/v2.27.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    sudo chmod +x /usr/local/bin/docker-compose
fi

# Configurar Docker
sudo systemctl enable --now docker
sudo usermod -aG docker $USER
newgrp docker << EONG
# --------------------------
# Configuración de n8n
# --------------------------
echo -e "\n\e[33mPreparando entorno...\e[0m"
WORKDIR="/tmp/n8n-auto-install"
mkdir -p "$WORKDIR" && cd "$WORKDIR"

echo -e "\n\e[33mDescargando configuración...\e[0m"
curl -sO https://raw.githubusercontent.com/n8n-io/n8n/main/docker-compose.yml
curl -s https://raw.githubusercontent.com/n8n-io/n8n/main/.env.example > .env

echo -e "\n\e[33mConfigurando variables...\e[0m"
sed -i "s/N8N_HOST=localhost/N8N_HOST=$DOMAIN/" .env
sed -i "s/WEBHOOK_URL=/WEBHOOK_URL=https:\/\/$DOMAIN\//" .env
sed -i "s#~/.n8n#/root/.n8n#" docker-compose.yml

# --------------------------
# Configuración inicial de Nginx
# --------------------------
echo -e "\n\e[33mConfigurando Nginx (HTTP)...\e[0m"
sudo tee /etc/nginx/sites-available/n8n > /dev/null <<EOF
server {
    listen 80;
    server_name $DOMAIN;

    location / {
        proxy_pass http://localhost:5678;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection 'Upgrade';
        proxy_set_header Host \$host;
        proxy_cache_bypass \$http_upgrade;
    }
}
EOF

sudo ln -sf /etc/nginx/sites-available/n8n /etc/nginx/sites-enabled/
sudo nginx -t && sudo systemctl restart nginx

# --------------------------
# Obtener certificado SSL
# --------------------------
echo -e "\n\e[33mObteniendo certificado SSL...\e[0m"
sudo certbot --nginx -d $DOMAIN \
    --non-interactive \
    --agree-tos \
    --email $EMAIL \
    --redirect \
    --force-renewal

# --------------------------
# Configuración final de Nginx
# --------------------------
echo -e "\n\e[33mConfigurando Nginx (HTTPS)...\e[0m"
sudo tee /etc/nginx/sites-available/n8n > /dev/null <<EOF
server {
    listen 80;
    server_name $DOMAIN;
    return 301 https://\$host\$request_uri;
}

server {
    listen 443 ssl;
    server_name $DOMAIN;

    ssl_certificate /etc/letsencrypt/live/$DOMAIN/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/$DOMAIN/privkey.pem;

    location / {
        proxy_pass http://localhost:5678;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection 'Upgrade';
        proxy_set_header Host \$host;
        proxy_cache_bypass \$http_upgrade;
        proxy_buffering off;
    }
}
EOF

# --------------------------
# Iniciar servicios finales
# --------------------------
echo -e "\n\e[33mIniciando contenedores...\e[0m"
docker-compose up -d

echo -e "\n\e[33mAplicando configuración final...\e[0m"
sudo systemctl restart nginx

EONG

# --------------------------
# Limpieza final
# --------------------------
echo -e "\n\e[33mRealizando limpieza final...\e[0m"
sudo rm -rf /tmp/n8n-auto-install

# --------------------------
# Verificación final
# --------------------------
echo -e "\n\e[1;32mInstalación completada!\e[0m"
echo -e "Accede a tu instancia en: \e[1;34mhttps://$DOMAIN\e[0m"
echo -e "\nVerifica el estado con:"
echo -e "  sudo systemctl status n8n"
echo -e "  docker ps"
